Some important points and tips to consider:

- If for array a range sum question for subarray is given, always think of prefix sum algo.
- To find total sum of all subarray sum, just use contribution technique {sum += (i+1) * (n-1)}
- Jab bhi tum kisi loop ke andar ek list bana rahe ho aur usse result mein daal rahe ho,
    hamesha uska copy banake daalo â€” warna sab result same reference ban jaayenge.
- Generally:
    Contribution technique: Use when working with all subarrays/subsequences without specific conditions.
    Avoid contribution: When there's a condition (like sum < B) that affects individual subarrays differently.
    Remember, these are guidelines, not strict rules. The key is understanding the problem's requirements and choosing the most appropriate technique.

- No of diagonals in a 2d matrix from right to left:
        (NO OF COLUMNS + NO OF ROWS-1) 

- COL-WISE SUM:
         for(int col=0;col<m;col++)
        {
            int sum = 0;
            for(int row=0;row<n;row++)
            {
                sum += A[row][col];
            }
            ans[col] = sum;
        }
- ROW-WISE SUM:
         for(int row=0;row<n;row++)
        {
            int sum = 0;
            for(int col=0;col<m;col++)
            {
                sum += A[row][col];
            }
            ans[row] = sum;
        }

- In anti-diagonals, the sum of indices (i+j) is constant.
- In Java, when we create a new integer array, it's automatically initialized with zeros.

- In programming there are 256 characters. ASCII code goes from 0  -> 256
    - A|Z = 65 to 90
    - a|z = 97 to 122
    - A + 32 = a ......
    - 0|9 = 48 to 57
