# Kadane's Algorithm 🧠

````````````````````````````````````````````````````````````````````````
📌 Notes
  This algorithm works only when at least one positive number is present.
  For all-negative arrays, tweak to initialize with (Integer.MIN_VALUE).
````````````````````````````````````````````````````````````````````````

Kadane’s Algorithm is a famous **Dynamic Programming** algorithm used to find the **maximum sum of a contiguous subarray** in an array of integers.

---

## 🔍 Problem Statement

Given an array `arr[]` of size `n`, find the contiguous subarray (containing at least one number) which has the **largest sum** and return its sum.

---

## ✅ Approach: Kadane’s Algorithm

1. Initialize two variables:  
   `maxSoFar = arr[0]`  
   `maxEndingHere = arr[0]`

2. Traverse the array from index `1` to `n-1`:
   - At each index, update:  
     `maxEndingHere = max(arr[i], maxEndingHere + arr[i])`
   - Update the global max:  
     `maxSoFar = max(maxSoFar, maxEndingHere)`

3. `maxSoFar` now holds the answer.
---


## 💻 Code (Java)
```java
public class KadanesAlgorithm {
    public static int maxSubArraySum(int[] arr) {
        int maxSoFar = arr[0];
        int maxEndingHere = arr[0];

        for (int i = 1; i < arr.length; i++) {
            maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }

        return maxSoFar;
    }

    public static void main(String[] args) {
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        System.out.println("Maximum Subarray Sum is: " + maxSubArraySum(arr));
    }
}

________________________________________________________________________________________-

📈 Time & Space Complexity
  Time Complexity: O(n)
  Space Complexity: O(1)

